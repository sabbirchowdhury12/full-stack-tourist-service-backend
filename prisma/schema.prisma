// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    String      @id  @default(uuid())
  name  String
  email String  @unique
  password String
  role UserRole @default(user)
  address String? 
  contactNo String?
  image String?
 createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  reviews  Review[]
  ratings  Rating[]
  booked BookAndShedule[]

  @@map("users")
  
}
enum UserRole {
  super_admin
  admin
  user
}





model Service {
  id    String      @id  @default(uuid())
  service_name String
  category ServiceCategory
  location String
  price Int 
  image String
  status BookingStatus @default(upcoming)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  reviews  Review[]
  ratings  Rating[]
  booked BookAndShedule[]
  

  
   @@map("services")
}
enum BookingStatus {
  upcoming
  available
}
enum ServiceCategory {
  hotel
  car
  tour
}

model Review {
  id        Int     @id @default(autoincrement())
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   String
   createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  
   @@map("reviews")
}

model Rating {
  id        Int     @id @default(autoincrement())
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  rating    String
   createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

   @@map("ratings")
}


model BookAndShedule {
  id    String      @id  @default(uuid())
  date    Json  
  status BookAndSheduleStatus     @default(pending)
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

  @@map("BookAndShedules")
  
}

enum BookAndSheduleStatus {
  pending
  confirmed
  canceled
}